import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState} from '../../app/store';
import {fetchProjects} from "./projectAPI";

export interface Project {
    id: number, lang: string, name: string, description: string, example: string

}

export interface Projects {
    projects: Project[]
    status: string
}

const initialState: Projects = {
    projects: [],
    status: 'idle'
};


export const testSlice = createSlice({
    name: 'test',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        addProject: (state, action: PayloadAction<Project>) => {
            state.projects = [...state.projects, action.payload]
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getProjects.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getProjects.fulfilled, (state, action) => {
                state.status = 'idle';
                state.projects = action.payload.data;
            })
            .addCase(getProjects.rejected, (state) => {
                state.status = 'failed';
            });
    }
});

export const getProjects = createAsyncThunk(
    'projects/fetchCount',
    async () => {
        // The value we return becomes the `fulfilled` action payload
        return await fetchProjects();
    }
);

export const { addProject } = testSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTest = (state: RootState) => state.test;


export default testSlice.reducer;
