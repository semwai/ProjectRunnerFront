import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState} from '../../app/store';
import {fetchDeletePage, fetchPages} from "./pagesAPI";
import {Pages, TinyPage} from "../../app/interfaces";


const initialState: Pages = {
    value: [],
    status: 'idle',
    need_update: false,
};


export const pagesSlice = createSlice({
    name: 'pages',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        addPage: (state, action: PayloadAction<TinyPage>) => {
            state.value = [...state.value, action.payload]
        },
        setNeedUpdate: (state, action: PayloadAction<boolean>) => {
            state.need_update = action.payload
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getPages.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(getPages.fulfilled, (state, action) => {
                state.status = 'idle'
                state.need_update = false
                state.value = action.payload.data
            })
            .addCase(getPages.rejected, (state, action) => {
                state.status = 'failed'
            })
            .addCase(deletePage.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(deletePage.fulfilled, (state, action) => {
                state.status = 'idle'
                //store.dispatch(getPages())
                state.need_update = true
            })
            .addCase(deletePage.rejected, (state) => {
                state.status = 'failed'
            })
        ;
    }
});

export const getPages = createAsyncThunk(
    'pages/fetchPages',
    async () => {
        // The value we return becomes the `fulfilled` action payload
        return await fetchPages();
    }
);

export const deletePage = createAsyncThunk(
    'pages/fetchDeletePage',
    async (id: Number) => {
        return await fetchDeletePage(id);
    }
);


export const { addPage, setNeedUpdate } = pagesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPages = (state: RootState) => state.pages;


export default pagesSlice.reducer;
