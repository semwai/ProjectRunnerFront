import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState} from '../../app/store';
import {fetchProject} from "./projectAPI";

export interface Project {
    id: number, name: string, description: string, lang: string, example: string

}

export interface ProjectStorage {
    value: Project | null
    ws: WebSocket | null
    start: boolean // отправлен ли проект на сервер
    status: string
}

const initialState: ProjectStorage = {
    value: null,
    ws: null,
    start: false,
    status: 'idle'
};


export const projectSlice = createSlice({
    name: 'project',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        writeCode: (state, action: PayloadAction<string>) => {
            if (state.value !== null)
                state.value.example = action.payload
        },
        start: (state) => {
            state.start = true
            state.ws?.send(JSON.stringify({
                type: 'program',
                data: state.value?.example
            }))
        },
        restart: (state) => {
            if (state.value == null || state.ws == null)
                return
            state.start = false
            state.ws.close()
            state.ws = new WebSocket(`ws://${window.location.hostname + ':8000'}/ws?project_id=${state.value.id}`)
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getProject.pending, (state) => {
                state.status = 'loading';
                state.value = null;
                if (state.ws) {
                    state.ws.close()
                }
                state.ws = null
                state.start = false
            })
            .addCase(getProject.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
                state.ws = new WebSocket(`ws://${window.location.hostname + ':8000'}/ws?project_id=${action.payload.id}`)
                //console.log(state.ws)
            })
            .addCase(getProject.rejected, (state) => {
                state.status = 'failed';
            });
    }
});

export const getProject = createAsyncThunk(
    'project/fetchProject',
    async (id: number) => {
        // The value we return becomes the `fulfilled` action payload
        return await fetchProject(id);
    }
);

export const { writeCode, start, restart } = projectSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProject = (state: RootState) => state.project;


export default projectSlice.reducer;
